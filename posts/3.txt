2:I[8523,[],""]
3:I[8009,[],""]
4:I[6282,["282","static/chunks/282-676446d00e1f0e91.js","517","static/chunks/app/posts/layout-84209971c6e87e3f.js"],""]
0:["UzuRu1J7jfQO6TjMKAJJn",[[["",{"children":["posts",{"children":["3",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":["3",{"children":["__PAGE__",{},[["$L1",[["$","h1",null,{"children":"Node.js, 싱글 스레드 약점 극복하기 (PM2)"}],"\n",["$","p",null,{"children":"Node.js가 싱글 스레드에서 동작한다는 사실은 많은 분들이 알고 계시는 사실입니다."}],"\n",["$","p",null,{"children":"싱글 코어 성능의 향상이 점점 더뎌지고, 그를 극복하기 위해 CPU 제조사들이 멀티코어를 밀고 있는 현재,\n싱글 코어만을 활용할 수 있다는 점은 실행환경의 치명적 약점으로 볼 수 있습니다."}],"\n",["$","p",null,{"children":"그러면 Node.js는 프로토타입을 제작할 때만 사용하고, 트래픽이 높아지면 다른 언어로 갈아타야 하는 걸까요?"}],"\n",["$","p",null,{"children":"다행히도, Node.js는 싱글 스레드 실행환경이지만 이를 극복할 수 있는 방안이 몇가지 있습니다."}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"PM2 활용"}],"\n",["$","li",null,{"children":"worker_thread 활용"}],"\n"]}],"\n",["$","p",null,{"children":"이번 글에서는 PM2를 활용해서 Node.js가 더 많은 CPU 코어를 활용할 수 있도록 하는 방법을 소개해드리겠습니다."}],"\n",["$","h2",null,{"children":"PM2"}],"\n",["$","p",null,{"children":[["$","a",null,{"href":"https://pm2.keymetrics.io","children":"PM2"}],"는 자바스크립트로 작성된 프로세스 관리 도구입니다.\n프로세스 모니터링, 재시작, 로깅 등 다양한 유용한 기능을 제공하지만, 이 글에서 주목할 부분은 ",["$","strong",null,{"children":"클러스터 모드"}],"입니다."]}],"\n",["$","h2",null,{"children":"PM2의 클러스터 모드"}],"\n",["$","p",null,{"children":"PM2의 공식문서에서는 클러스터 모드에 대해 아래와 같이 설명하고 있습니다."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"The cluster mode allows networked Node.js applications (http(s)/tcp/udp server) to be scaled across all CPUs available,\nwithout any code modifications. This greatly increases the performance and reliability of your applications,\ndepending on the number of CPUs available."}],"\n"]}],"\n",["$","p",null,{"children":["클러스터 모드는 ",["$","a",null,{"href":"https://nodejs.org/api/cluster.html","children":"Node.js의 클러스터 API"}],"를 사용해 같은 포트를 공유하는 프로세스를 여러개 만들어주는 기능입니다.\n하나의 프로세스가 병렬성을 가지지 못하니, 여러개의 프로세스를 만들어서 부하 분산을 시켜주는 개념이라고 보시면 됩니다."]}],"\n",["$","p",null,{"children":"PM2의 클러스터 모드를 사용하려면 pm2를 실행할 때 -i 옵션을 주면 됩니다.\n-i 옵션 뒤의 max는 cpu의 수 만큼의 프로세스를 생성하겠다는 의미로, 직접 프로세스의 수를 조정하고 싶으면 max 대신 숫자를 집어넣으면 됩니다."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-shell","children":"pm2 start server.js -i max\n# 또는\n# pm2 start server.js -i 42\n"}]}],"\n",["$","h2",null,{"children":"단일 프로세스와 클러스터 모드의 성능 비교"}],"\n",["$","p",null,{"children":["성능 비교를 위해 express로 간단하게 hello world를 반환하는 스크립트를 만들어 ",["$","a",null,{"href":"/posts/2","children":"28코어 56스레드 서버"}],"에 올리고, 벤치마킹 툴인 wrk로 비교해봤습니다."]}],"\n",["$","h3",null,{"children":"벤치마크 비교 표"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{}],["$","th",null,{"children":"단일 프로세스"}],["$","th",null,{"children":"클러스터 모드"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"처리량"}],["$","td",null,{"children":"초당 5,907 요청"}],["$","td",null,{"children":"초당 96,115 요청"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"데이터 전송"}],["$","td",null,{"children":"초당 1MB"}],["$","td",null,{"children":"초당 21MB"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"지연 시간"}],["$","td",null,{"children":"52ms"}],["$","td",null,{"children":"12ms"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Timeout"}],["$","td",null,{"children":"456건"}],["$","td",null,{"children":"0건"}]]}]]}]]}],"\n",["$","h3",null,{"children":"단일 프로세스 벤치마크"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"Running 30s test @ http://localhost:3000\n  12 threads and 1000 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    69.20ms   52.48ms   1.98s    98.55%\n    Req/Sec   645.57    475.44     3.04k    72.19%\n  177758 requests in 30.09s, 40.52MB read\n  Socket errors: connect 0, read 0, write 0, timeout 456\nRequests/sec:   5907.92\nTransfer/sec:      1.35MB\n"}]}],"\n",["$","h3",null,{"children":"클러스터 모드 벤치마크"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"Running 30s test @ http://localhost:3000\n  12 threads and 1000 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency    12.24ms   11.62ms 242.57ms   91.25%\n    Req/Sec     8.06k     1.13k   18.13k    77.09%\n  2892257 requests in 30.09s, 659.23MB read\nRequests/sec:  96115.21\nTransfer/sec:     21.91MB\n"}]}],"\n",["$","h3",null,{"children":"CPU 사용량 비교"}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/posts/3/normal-mode-wrk-result.png","alt":"단일 프로세스 CPU 사용량"}]}],"\n",["$","p",null,{"children":"단일 프로세스 모드에서는 CPU 사용량이 최대 2%에 그쳤습니다."}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/posts/3/cluster-mode-wrk-result.png","alt":"클러스터 모드 CPU 사용량"}]}],"\n",["$","p",null,{"children":"반면, 클러스터 모드 사용 시 대부분의 CPU가 활발히 사용되고 있는 모습을 확인할 수 있습니다."}],"\n",["$","h2",null,{"children":"결론"}],"\n",["$","p",null,{"children":"현대의 CPU들은 대부분 멀티코어라 CPU를 100% 활용하기 위해서는 따로 프로그래밍적인 처리가 필요하지만,\nPM2를 활용하면, 손쉽게 Node.js 환경에서 돌아가는 서버가 모든 CPU 자원을 활용할 수 있도록 할 수 있습니다.\n트래픽이 올라가면 생각없이 Scale Up 하기보다는, CPU 점유율 등을 고려하여 적절한 판단을 내리는 것이 중요할 것 같습니다.\n읽어주셔서 감사합니다."}]],null],null],null]},[null,["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","3","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","article",null,{"className":"prose container min-h-screen mx-auto p-8","children":[["$","$L4",null,{"href":"/","className":"text-xs","children":["<"," 돌아가기"]}],["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/1352877716939c65.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"kr","children":["$","body",null,{"className":"font-wanted","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]],null],null],["$L5",null]]]]
5:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"최영진의 개발 노트"}],["$","meta","3",{"name":"description","content":"웹 개발의 A to Z를 탐구하는 기술 블로그. 실전에서 마주한 문제들과 그 해결 과정을 공유합니다."}],["$","meta","4",{"name":"google-site-verification","content":"OwHKPNKdBwgpiIeHCPodU73heHdBhAoM7A9AphpQxbI"}],["$","meta","5",{"property":"og:title","content":"최영진의 개발 노트"}],["$","meta","6",{"property":"og:description","content":"웹 개발의 A to Z를 탐구하는 기술 블로그. 실전에서 마주한 문제들과 그 해결 과정을 공유합니다."}],["$","meta","7",{"name":"twitter:card","content":"summary"}],["$","meta","8",{"name":"twitter:title","content":"최영진의 개발 노트"}],["$","meta","9",{"name":"twitter:description","content":"웹 개발의 A to Z를 탐구하는 기술 블로그. 실전에서 마주한 문제들과 그 해결 과정을 공유합니다."}]]
1:null
